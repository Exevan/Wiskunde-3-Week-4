Oefening 1
	Deze implementatie van getMaxDepth() zal nie de correcte hoogte van een boom berekenen.
	In plaats van elk pad in de boom te overlopen zoekt deze implementatie enkel in het meest
	linkse en het meest rechtse pad van de root. Deze paden zijn niet per se de langste paden
	in de boom en dus wordt het langste pad (en de diepte van de boom) niet altijd gevonden.
	
Oefening 2
	Zie binarySearchTree.BinarySearchTree1.class
	
Oefening 3
	Zie binaryHeap.BinaryMinHeap1.class
	
Oefening 4
	Wanneer deze implementatie vanuit node 1 rechts gaat naar node2 zal het linker child van 
	node 2 nooit op de stack gepusht worden. Dus zodra het algoritme rechts begint te zoeken,
	zal het nooit meer naar links kunnen zoeken.
	Voor een correcte en efficiënte implementatie, zie Wiskunde-3-Week-1/Wiskunde 3 Week 1/src/binaryTree/BinaryTree.java
	
Oefening 5
	Zie binarySearchTree.BinarySearchTree2.class
	
Oefening 6
	Deze code voor deleteMin() werkt niet omdat het bubble-down mechanisme een waarde niet effectief wisselt met zijn kleinste kind 
	terwijl dat in deze implementatie el noodzakelijk is. Het gevolg hiervan is dat wanneer een waarde een keer naar beneden 
	gewisseld moet worden het algoritme wel werkt maar wanneer een waarde meer dan een keer naar beneden gewisseld moet worden, loopt het mis.
	Neem als voorbeeld de heap [1, 1, 1, 10, 1, 10] en verwijder het minimum. Het resultaat zou [1, 1, 1, 10, 10] moeten zijn 
	maar we vinden [1, 10, 1, 10, 1]. Wanneer we er voor zorgen dat een waarde wel correct gewisseld wordt, vinden we het correcte resultaat.